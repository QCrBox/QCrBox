{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Contents","text":"<p>TODO</p> <p>Add a brief overview of the project here (or a link to the relevant documentation page).</p> <p>Documentation:</p> <ul> <li>Tutorials</li> <li>How-To Guides (Start Here)</li> <li>Technical Reference</li> <li>Background Information</li> </ul> <p>Technical reference:</p> <ul> <li>Architectural Decision Records</li> <li>Changelog</li> </ul> <p>This documentation structure is based on the Divio Documentation System.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>This project aims to follow Semantic Versioning. However, there will be an initial period of stabilisation where this is not adhered to (releases with version numbers <code>0.0.x</code>).</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#new-features","title":"New Features","text":""},{"location":"CHANGELOG/#enhancements","title":"Enhancements","text":""},{"location":"CHANGELOG/#issues-fixed","title":"Issues Fixed","text":""},{"location":"CHANGELOG/#development","title":"Development","text":""},{"location":"CHANGELOG/#documentation","title":"Documentation","text":""},{"location":"CHANGELOG/#001","title":"0.0.1","text":""},{"location":"CHANGELOG/#new-features_1","title":"New Features","text":"<ul> <li>Docker base images:</li> <li><code>base-application</code></li> <li><code>base-novnc</code> #39</li> <li>Core components:</li> <li><code>qcrbox-message-bus</code> #9</li> <li><code>qcrbox-registry</code> #13</li> <li><code>qcrbox-nextflow</code> #60</li> <li>Crystallographic applications:</li> <li>CrystalExplorer #44</li> <li>Olex2 #46</li> <li>CLI tool (<code>qcb</code>) for common development and deployment tasks. (#10)</li> <li>Python package (<code>qcrbox</code>) to interact with QCrBox from Python code. (#14)</li> <li>The base image now includes cctbx and QCrBoxTools. (#53)</li> </ul>"},{"location":"CHANGELOG/#documentation_1","title":"Documentation","text":"<ul> <li>Created documentation skeleton. (#2)</li> <li>Set up GitHub Actions for continuous deployment of the docs to GitHub pages. (#11)</li> <li>Added how-to guide on how to set up a development environment. (#24)</li> </ul>"},{"location":"CHANGELOG/#internal-improvements","title":"Internal improvements","text":"<ul> <li>The base images now use the mamba package manager, resulting in much faster build times than using <code>conda</code>.</li> <li>All QCrBox-specific Python packages are now installed in the base mamba environment. The separate Python virtual environment has been removed. (#54)</li> <li>Python code is linted and auto-formatted using ruff. #64</li> </ul>"},{"location":"ADRs/","title":"What are ADRs?","text":"<p>Architectural Decision Records (ADR's) provide a lightweight format for documenting the reasons why certain architectural or technical decisions were taken, and more importantly the context which led to these decisions. This allows to revisit these decisions later on, in case the context changes or more information becomes available. See Michael Nygard's blog post for more details on ADR's.</p> <p>Despite the name \"architectural decision records\", where appropriate it is also encouraged to document technological decisions (for example which Javascript framework to use for a web frontend) or \"cultural\" decisions.</p> <p>ADR's should be placed in sepearate files that are numbered sequentially (e.g. <code>0001-some-useful-description.md</code>). The contents should follow this template:</p> <ul> <li> <p>Title: short present tense imperative phrase, less than 50 characters, like a git commit message.</p> </li> <li> <p>Date: when was this issue discussed (to give approximate temporal context)</p> </li> <li> <p>Status: proposed, accepted, rejected, deprecated, superseded, etc.</p> </li> <li> <p>Context: what is the issue that we're seeing that is motivating this decision or change.   This section describes the forces at play, including technological, political, social, and project local. These forces are probably in tension, and should be called out as such. The language in this section is value-neutral. It is simply describing facts.</p> </li> <li> <p>Decision: what is the change that we're actually proposing or doing (describes our response to these forces)</p> </li> <li> <p>Consequences: what becomes easier or more difficult to do because of this change.   All consequences should be listed here, not just the \"positive\" ones. A particular decision may have positive, negative, and neutral consequences, but all of them affect the team and project in the future.</p> </li> </ul>"},{"location":"background_info/contents/","title":"Background Information","text":"<p>Info</p> <p>Background information:</p> <ul> <li>is understanding-oriented</li> <li>gives explanations</li> <li>provides background and context</li> </ul> <p>See here for context and details.</p>"},{"location":"background_info/contents/#contents","title":"Contents","text":""},{"location":"how_to_guides/contents/","title":"How-To Guides","text":"<p>Info</p> <p>A how-to guide:</p> <ul> <li>is goal-oriented</li> <li>shows how to solve a specific problem</li> <li>is a series of steps</li> </ul> <p>See here for context and details.</p>"},{"location":"how_to_guides/contents/#contents","title":"Contents","text":"<ul> <li>Set up a development environment</li> </ul>"},{"location":"how_to_guides/set_up_a_dev_environment/","title":"Set up a development environment","text":""},{"location":"how_to_guides/set_up_a_dev_environment/#check-prerequisites","title":"Check prerequisites","text":"<p>Make sure you have the necessary prerequisites installed.</p> <p>TODO</p> <p>List all prerequisites and their minimum required versions.</p> <pre><code>$ python --version\nPython 3.11.5\n\n$ docker --version\nDocker version 24.0.6, build ed223bc\n\n$ docker compose version\nDocker Compose version v2.21.0\n</code></pre>"},{"location":"how_to_guides/set_up_a_dev_environment/#clone-the-qcrbox-repository","title":"Clone the QCrBox repository","text":"<pre><code>$ git clone https://github.com/QCrBox/QCrBox.git\n$ cd QCrBox\n</code></pre>"},{"location":"how_to_guides/set_up_a_dev_environment/#create-a-virtual-environment","title":"Create a virtual environment","text":"<p>Create a virtual environment for the <code>qcrbox</code> Python package and activate it.</p> <pre><code>$ python -m venv ./venv\n$ source ./venv/bin/activate\n</code></pre> <p>Note</p> <p>In this guide we use a \"vanilla\" Python virtual environment because it does not require any additional dependencies. If you use a custom package manager such as <code>poetry</code> or <code>conda</code> you can of course adapt the previous step to your specific setup.</p> <p>Let's also update/install some core packages to ensure they are up-to-date. <pre><code>(venv) $ pip install -U pip wheel setuptools\n</code></pre></p>"},{"location":"how_to_guides/set_up_a_dev_environment/#install-the-qcrbox-python-package","title":"Install the <code>qcrbox</code> Python package","text":"<p>Next, install the <code>qcrbox</code> package itself. The following command installs the minimum required dependencies to run the <code>qcb</code> command line tool, which acts as the command line interface for the Quantum Crystallography Toolbox. <pre><code>(venv) $ pip install -e ./qcrbox\n</code></pre></p> <p>Note</p> <p>Here we used the <code>-e</code> switch to install <code>qcrbox</code> in editable mode. This means that any changes we make to the code during development are automatically picked up in our local installation without having to reinstall/upgrade the <code>qcrbox</code> package.</p>"},{"location":"how_to_guides/set_up_a_dev_environment/#installation-with-optional-extra-dependencies","title":"Installation with (optional) extra dependencies","text":"<p>QCrBox comes with several sets of additional dependencies which can be specified in square brackets after <code>qcrbox</code>.</p> <p>If you want to build the documentation, for example, run the following command - this will install <code>MkDocs</code> and a few other packages needed to build and serve the documentation. <pre><code>(venv) $ pip install -e ./qcrbox[docs]\n</code></pre></p> <p>In addition, if you plan on developing QCrBox, making modifications to the code and/or submitting merge requests, you most likely want to install the <code>dev</code> dependencies, too. <pre><code>(venv) $ pip install -e ./qcrbox[dev]\n</code></pre></p> <p>Two other sets of additional dependencies are <code>qcrbox[client]</code> and <code>qcrbox[server]</code>, but these are mostly relevant for installation inside the Docker containers (unless you want to run the QCrBox registry server or client outside of docker during development).</p> <p>Finally, you can install all additional dependencies by running <pre><code>$ pip install qcrbox[all]\n</code></pre></p>"},{"location":"how_to_guides/set_up_a_dev_environment/#installing-pre-commit-hooks-for-development-on-qcrbox","title":"Installing pre-commit hooks (for development on <code>qcrbox</code>)","text":"<p>For development on <code>qcrbox</code>, you need to install the pre-commit hooks for linting, auto-formatting, etc. Make sure you have the dev dependencies installed (as described above), which ensures that the <code>pre-commit</code> tool is installed. Then run: <pre><code>(venv) $ pre-commit install\n</code></pre> Now <code>pre-commit</code> will run automatically on <code>git commit</code>.</p>"},{"location":"how_to_guides/set_up_a_dev_environment/#verify-the-installation","title":"Verify the installation","text":"<p>Verify that we can now run the <code>qcb</code> command line tool, which is the main CLI interface for interacting with QCrBx from the command line. <pre><code>$ qcb\nUsage: qcb [OPTIONS] COMMAND [ARGS]...\n\n  Command line interface for the Quantum Crystallography Toolbox.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  build    Build QCrBox components.\n  docs     Build/serve the documentation.\n  down     Shut down QCrBox components.\n  invoke   Invoke a registered command with given arguments.\n  list     List registered resources (applications, commands, etc.)\n  up       Start up QCrBox components.\n  version  Print the qcrbox version.\n</code></pre></p> <pre><code>(venv) $ qcb version\n0.1.dev223+gf1e848b\n</code></pre> <pre><code>(venv) $ qcb list components\nqcrbox-message-bus\nqcrbox-registry\nshelx\n</code></pre> <pre><code>(venv) $ qcb list components --all\nbase-ancestor\nbase-application\nqcrbox-message-bus\nqcrbox-registry\nshelx\n</code></pre>"},{"location":"technical_reference/contents/","title":"Technical Reference","text":"<p>Info</p> <p>Technical reference:</p> <ul> <li>is information-oriented</li> <li>describes the machinery</li> <li>is accurate and complete</li> </ul> <p>See here for context and details.</p>"},{"location":"technical_reference/contents/#contents","title":"Contents","text":""},{"location":"tutorials/contents/","title":"Tutorials","text":"<p>Info</p> <p>A tutorial:</p> <ul> <li>is learning-oriented</li> <li>allows newcomers to get started</li> <li>is a lesson</li> </ul> <p>See here for context and details.</p>"},{"location":"tutorials/contents/#contents","title":"Contents","text":""}]}