services:
  qcrbox-nats:
    image: "nats:2.10.16-alpine"
    volumes:
      - qcrbox-nats-storage:/mnt/nats/
    networks:
      - qcrbox-net
    hostname: "qcrbox-nats"
    ports:
      - "${QCRBOX_BIND_ADDRESS:?Must set env var QCRBOX_BIND_ADDRESS}:${QCRBOX__NATS__PORT:?Must set env var QCRBOX__NATS__PORT}:4222"
      - "${QCRBOX_BIND_ADDRESS:?Must set env var QCRBOX_BIND_ADDRESS}:${QCRBOX__NATS__MANAGEMENT_PORT:?Must set env var QCRBOX__NATS__MANAGEMENT_PORT}:8222"
    restart: unless-stopped

  qcrbox-nui:
    image: "ghcr.io/nats-nui/nui:latest"
    volumes:
      - qcrbox-nui-db:/db
    ports:
      - 31311:31311
    networks:
      - qcrbox-net
    restart: unless-stopped

  qcrbox-reverse-proxy:
    image: traefik:v3.1.0
    command:
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--ping=true"
      - "--api.insecure=true"  # enable the web UI
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
    healthcheck:
      test: ["traefik", "healthcheck", "--ping"]
      interval: 60s
      start_period: 30s
      start_interval: 1s
    networks:
      - qcrbox-net
    ports:
      # The HTTP port
      - "${QCRBOX_BIND_ADDRESS:?Must set env var QCRBOX_BIND_ADDRESS}:${QCRBOX__REVERSE_PROXY__PORT:?Must set env var QCRBOX__REVERSE_PROXY__PORT}:80"
      # The Web UI (enabled by --api.insecure=true above)
      - "${QCRBOX_BIND_ADDRESS:?Must set env var QCRBOX_BIND_ADDRESS}:${QCRBOX__REVERSE_PROXY__WEBUI_PORT:?Must set env var QCRBOX__REVERSE_PROXY__WEBUI_PORT}:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro

  qcrbox-message-bus:
    image: "qcrbox/message-bus:${QCRBOX_DOCKER_TAG:?Must set env var QCRBOX_DOCKER_TAG}"
    volumes:
      - qcrbox-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - qcrbox-net
    hostname: "qcrbox-message-bus"
    ports:
      - "${QCRBOX_BIND_ADDRESS:?Must set env var QCRBOX_BIND_ADDRESS}:${QCRBOX__RABBITMQ__PORT:?Must set env var QCRBOX__RABBITMQ__PORT}:5672"
      - "${QCRBOX_BIND_ADDRESS:?Must set env var QCRBOX_BIND_ADDRESS}:${QCRBOX__RABBITMQ__MANAGEMENT_PORT:?Must set env var QCRBOX__RABBITMQ__MANAGEMENT_PORT}:15672"
#      - "${QCRBOX_BIND_ADDRESS:?Must set env var QCRBOX_BIND_ADDRESS}:${QCRBOX_PORT_WEBSOCKET:?Must set env var QCRBOX_PORT_WEBSOCKET}:4000"
    depends_on:
      - qcrbox-reverse-proxy
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q is_running
      interval: 5s
      timeout: 30s
      start_period: 30s
      # Note: the 'start_interval' option is not supported yet
      # (see https://github.com/docker/compose/issues/10830#issuecomment-1722514100)
      #start_interval: 1s
      retries: 5

  qcrbox-registry:
    image: "qcrbox/registry:${QCRBOX_DOCKER_TAG:?Must set env var QCRBOX_DOCKER_TAG}"
    volumes:
      - ${QCRBOX_SHARED_FILES_DIR_HOST_PATH:?Must set env var QCRBOX_SHARED_FILES_DIR_HOST_PATH}:${QCRBOX_SHARED_FILES_DIR_CONTAINER_PATH:?Must set env var QCRBOX_SHARED_FILES_DIR_CONTAINER_PATH}
      - qcrbox-registry-db:${QCRBOX_REGISTRY_DB_DIR:?Must set env var QCRBOX_REGISTRY_DB_DIR}
    ports:
      - "${QCRBOX_BIND_ADDRESS}:${QCRBOX_REGISTRY_PORT:?Must set env var QCRBOX_REGISTRY_PORT}:8000"
    depends_on:
      qcrbox-nats:
        condition: service_healthy
    environment:
      QCRBOX__NATS__HOST: "qcrbox-nats"
    networks:
      - qcrbox-net
    restart: "unless-stopped"

  qcrbox-nextflow:
    image: "qcrbox/nextflow:${QCRBOX_DOCKER_TAG:?Must set env var QCRBOX_DOCKER_TAG}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - qcrbox-nextflow-home:${QCRBOX_NEXTFLOW_HOME:?Must set env var QCRBOX_NEXTFLOW_HOME}
      - ${QCRBOX_SHARED_FILES_DIR_HOST_PATH:?Must set env var QCRBOX_SHARED_FILES_DIR_HOST_PATH}:${QCRBOX_SHARED_FILES_DIR_CONTAINER_PATH:?Must set env var QCRBOX_SHARED_FILES_DIR_CONTAINER_PATH}
      # Note: for Nextflow to run correctly when executed from within a Docker container,
      # the host path to the shared folder must be mounted to the *same* path within the
      # `qcrbox-nextflow` container.
      - ${QCRBOX_SHARED_FILES_DIR_HOST_PATH:?Must set env var QCRBOX_SHARED_FILES_DIR_HOST_PATH}:${QCRBOX_SHARED_FILES_DIR_HOST_PATH:?Must set env var QCRBOX_SHARED_FILES_DIR_HOST_PATH}
    depends_on:
      qcrbox-message-bus:
        condition: service_healthy
    environment:
      QCRBOX_RABBITMQ_QUEUE_NAME: "qcrbox_nextflow"
      QCRBOX_REGISTRY_HOST: "qcrbox-registry"
      QCRBOX_REGISTRY_PORT: "8000"
      QCRBOX_NEXTFLOW_HOME: "${QCRBOX_NEXTFLOW_HOME:?Must set env var QCRBOX_NEXTFLOW_HOME}"
    networks:
      - qcrbox-net
    restart: "unless-stopped"

networks:
  qcrbox-net:

volumes:
  qcrbox-rabbitmq-data:
  qcrbox-registry-db:
  qcrbox-nextflow-home:
  qcrbox-nats-storage:
  qcrbox-nui-db:
